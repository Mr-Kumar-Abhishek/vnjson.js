{"version":3,"sources":["vnjson.js","plugins/get-scene.js","plugins/jump.js"],"names":["vnjs","plugins","TREE","DEBUG","on","event","handler","push","emit","args","Array","isArray","map","call","console","log","off","state","scene","label","index","current","object","setScene","name","body","characters","aliase","Object","keys","character","reply","param","parse","obj","ctx","next","init","conf","entryScene","data","sceneName","labelName","uri","gameDir","scenesDir","local","fetch","then","r","json","sceneBody","pathname","pathArr","split","getName","isNum","num","test","isScene","length","pathObj","pathArr1"],"mappings":"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","file":"vnjson.js","sourcesContent":["\r\nvar vnjs = {\r\n  \r\n      plugins: {},\r\n      TREE: {},\r\n      DEBUG: false,\r\n\r\n\r\n};\r\n\r\nvnjs.on = function(event, handler){\r\n          if (!vnjs.plugins[event]) {\r\n              vnjs.plugins[event] = [];\r\n          };\r\n          vnjs.plugins[event].push(handler);\r\n};\r\n\r\nvnjs.emit = function (event, ...args) {\r\n         if (Array.isArray(vnjs.plugins[event])) {\r\n            vnjs.plugins[event].map(function(handler){\r\n                    handler.call(vnjs, ...args);\r\n            });\r\n         }else{\r\n          console.log(`Event [ ${event} ] not found`)\r\n         }\r\n};\r\nvnjs.off = function (event) {\r\n        delete vnjs.plugins[event];\r\n};\r\n\r\n/*\r\n * В {state} должно помещаться все то\r\n * что сохроняется в карту памяти\r\n * И что важно загрузить из нее без последствий.\r\n * В состоянии не должно быть мусора\r\n */\r\nvnjs.state = {\r\n  scene: 'scene',\r\n  label: 'label',\r\n  index: 0\r\n};\r\n/*\r\n * Получает текущее тела из состояние\r\n */\r\nvnjs.current = {\r\n  \r\n      scene: function (){\r\n        return vnjs.TREE[vnjs.state.scene];\r\n      },\r\n      label: function (){\r\n        return vnjs.TREE[vnjs.state.scene][vnjs.state.label];\r\n      },\r\n      object: function (){\r\n        return vnjs.TREE[vnjs.state.scene][vnjs.state.label][vnjs.state.index];\r\n     }\r\n};\r\n\r\n\r\nvnjs.setScene = function (name, body){\r\n  this.TREE[name] = body;\r\n  this.state.scene = name;\r\n\r\n  body.characters.map(character=>{\r\n    let aliase = Object.keys(character)[0];\r\n\r\n    vnjs.on(aliase, function(reply){\r\n          vnjs.emit('character', {aliase, param: character[aliase], reply } );\r\n\r\n    });\r\n\r\n});\r\n this.parse();\r\n};\r\n\r\n\r\n\r\n\r\nvnjs.parse = function (obj){\r\n  var ctx = null;\r\n  if(obj){\r\n    ctx = obj;\r\n  }else{\r\n    ctx = vnjs.current.object();\r\n  };\r\n\r\n  for(let event in ctx){\r\n\r\n        vnjs.emit(event, ctx[event]);\r\n\r\n  };\r\n};\r\n\r\n\r\nvnjs.next = function (){\r\n  this.parse();\r\n  this.state.index++;\r\n  return '-------------------------';\r\n};\r\n\r\nvnjs.init = function (conf){\r\n  vnjs.conf = conf;\r\n  this.parse({'jump': conf.entryScene});\r\n  return true;\r\n};\r\n","/**\r\n conf = /scenes/\r\n*/\r\n\r\nvnjs.on('getScene', function(data){\r\n\tconst { sceneName, labelName, index } = data;\r\n\tconst { DEBUG, conf } = this;\r\n  let uri = `${conf.gameDir}/${conf.scenesDir}/${conf.local}/${sceneName}.json`;\r\n  fetch(uri)\r\n\t.then(r=>r.json())\r\n\t.then(sceneBody=>{\r\n\r\n\t\tif(DEBUG){\r\n\t\t\tconsole.log(sceneName, sceneBody)\r\n\t\t\tconsole.log(data);\r\n\t\t}\r\n\r\n\t\tvnjs.setScene(sceneName, sceneBody, labelName, index);\r\n\t})\r\n/*\r\n\r\nsetScene(\"*\", sceneBody);\r\n\r\nstate.label = \"mainMenu\";\r\n\r\nnext();\r\n*/\r\n\r\n});","vnjs.on('jump', function(pathname){\r\n\r\nconst { parse, state, emit, DEBUG } = this;\r\n\r\nconst pathArr = pathname.split('/');\r\n/*****\r\n#WARN\r\n> {jump: 'label/0'}\r\n< Object { labelName: \"0\", sceneName: \"label\", index: 0 }\r\n\r\n******/\r\nfunction getName(){\r\n  let sceneName = pathArr[0];\r\n  let labelName = pathArr[1];\r\n  let index = pathArr[2]||0;\r\n  return { labelName, sceneName, index: (+index) };\r\n};\r\n\r\nfunction isNum(num){\r\n  return /[0-9]/.test(+num)\r\n};\r\n\r\nfunction isScene(pathname){\r\n\r\n  if(pathArr.length===3){\r\n    return true;\r\n  }else if(pathArr.length===2){\r\n   \r\n    return !isNum(pathArr[1])\r\n  }\r\n};\r\n\r\n var pathObj = getName(pathname);\r\n\r\n{\r\n\tDEBUG&&console.log('jump: ', pathObj);\r\n};\r\n\r\n\r\n\r\n\r\n\r\nif(isScene(pathname)){\r\n    // set state\r\n    vnjs.state.scene = pathObj.sceneName;\r\n    vnjs.state.label = pathObj.labelName;\r\n    vnjs.state.index = pathObj.index;\r\n    emit('getScene', pathObj);\r\n}else{\r\n  const pathArr1 = pathname.split('/');\r\n\t // set state\r\n    vnjs.state.scene = vnjs.state.scene;\r\n    vnjs.state.label =  pathArr1[1]\r\n    vnjs.state.index = pathObj.index;\r\n\r\n   // setLabel(pathname, ctx.scene[pathname],  obj.num );\r\n   parse();\r\n}\r\n\r\n\r\n /*\r\n\tstate.index = 0;\r\n\tstate.label = \"chapter1\";\r\n\tstate.scene = \"scene2\";\r\n\tparse();*/\r\n\r\n});\r\n"]}